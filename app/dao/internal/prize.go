// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// PrizeDao is the data access object for table prize.
type PrizeDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns PrizeColumns // Columns contains all the column names of Table for convenient usage.
}

// PrizeColumns defines and stores column names for table prize.
type PrizeColumns struct {
	Id           string //                                
    PrizeName    string //                                
    PrizeStock   string //                                
    PrizeImage   string //                                
    Status       string // 1:激活，2: 未激活，3： 已删除  
    PrizeWeight  string //
}

//  prizeColumns holds the columns for table prize.
var prizeColumns = PrizeColumns{
	Id:          "id",            
            PrizeName:   "prize_name",    
            PrizeStock:  "prize_stock",   
            PrizeImage:  "prize_image",   
            Status:      "status",        
            PrizeWeight: "prize_weight",
}

// NewPrizeDao creates and returns a new DAO object for table data access.
func NewPrizeDao() *PrizeDao {
	return &PrizeDao{
		Group:   "default",
		Table:   "prize",
		Columns: prizeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PrizeDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PrizeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PrizeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}