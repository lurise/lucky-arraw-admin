// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ScoreDetailDao is the data access object for table score_detail.
type ScoreDetailDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns ScoreDetailColumns // Columns contains all the column names of Table for convenient usage.
}

// ScoreDetailColumns defines and stores column names for table score_detail.
type ScoreDetailColumns struct {
	Id            string //   
    CreatedTime   string //   
    Prize         string //   
    UserId        string //   
    ScoreHistory  string //
}

//  scoreDetailColumns holds the columns for table score_detail.
var scoreDetailColumns = ScoreDetailColumns{
	Id:           "id",             
            CreatedTime:  "created_time",   
            Prize:        "prize",          
            UserId:       "user_id",        
            ScoreHistory: "score_history",
}

// NewScoreDetailDao creates and returns a new DAO object for table data access.
func NewScoreDetailDao() *ScoreDetailDao {
	return &ScoreDetailDao{
		Group:   "default",
		Table:   "score_detail",
		Columns: scoreDetailColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ScoreDetailDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ScoreDetailDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ScoreDetailDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}